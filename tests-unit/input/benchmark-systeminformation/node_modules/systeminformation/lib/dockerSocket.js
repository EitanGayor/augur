//'use strict';
// ==================================================================================
// dockerSockets.js
// ----------------------------------------------------------------------------------
// Description:   System Information - library
//                for Node.js
// Copyright:     (c) 2014 - 2018
// Author:        Sebastian Hildebrandt
// ----------------------------------------------------------------------------------
// License:       MIT
// ==================================================================================
// 13. DockerSockets
// ----------------------------------------------------------------------------------

var net = require('net');
var isWin = require('os').type() === 'Windows_NT';
var socketPath = isWin ? '//./pipe/docker_engine' : '/var/run/docker.sock';

function DockerSocket() {

  return {

    listContainers: function (all, callback) {
      try {

        var socket = net.createConnection({path: socketPath});
        var alldata = '';

        socket.on('connect', function () {
          socket.write('GET http:/containers/json' + (all ? '?all=1' : '') + ' HTTP/1.0\r\n\r\n');
        });

        socket.on('data', function (data) {
          alldata = alldata + data.toString();
        });

        socket.on('error', function () {
          socket = false;
          callback({});
        });

        socket.on('end', function () {
          var startbody = alldata.indexOf('\r\n\r\n');
          alldata = alldata.substring(startbody, 100000).replace(/[\n\r]/g, '');
          socket = false;
          callback(JSON.parse(alldata));
        });
      } catch (err) {
        callback({});
      }
    },

    getStats: function (id, callback) {
      id = id || '';
      if (id) {
        try {
          var socket = net.createConnection({path: socketPath});
          var alldata = '';

          socket.on('connect', function () {
            socket.write('GET http:/containers/' + id + '/stats?stream=0 HTTP/1.0\r\n\r\n');
          });

          socket.on('data', function (data) {
            alldata = alldata + data.toString();
          });

          socket.on('error', function () {
            socket = false;
            callback({});
          });

          socket.on('end', function () {
            var startbody = alldata.indexOf('\r\n\r\n');
            alldata = alldata.substring(startbody, 100000).replace(/[\n\r]/g, '');
            socket = false;
            callback(JSON.parse(alldata));
          });
        } catch (err) {
          callback({});
        }
      } else {
        callback({});
      }
    },

    getProcesses: function (id, callback) {
      id = id || '';
      if (id) {
        try {
          var socket = net.createConnection({path: socketPath});
          var alldata = '';

          socket.on('connect', function () {
            socket.write('GET http:/containers/' + id + '/top?ps_args=-opid,ppid,pgid,vsz,time,etime,nice,ruser,user,rgroup,group,stat,rss,args HTTP/1.0\r\n\r\n');
          });

          socket.on('data', function (data) {
            alldata = alldata + data.toString();
          });

          socket.on('error', function () {
            socket = false;
            callback({});
          });

          socket.on('end', function () {
            var startbody = alldata.indexOf('\r\n\r\n');
            alldata = alldata.substring(startbody, 100000).replace(/[\n\r]/g, '');
            socket = false;
            callback(JSON.parse(alldata));
          });
        } catch (err) {
          callback({});
        }
      } else {
        callback({});
      }
    }
  };
}

module.exports = DockerSocket;
